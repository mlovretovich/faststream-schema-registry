{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"faststream-schema-registry","text":"<p>Middleware to integrate with the confluent schema registry for managing avro/json schemas.</p> <p>Schemas are generated from python classes using dataclasses-avroschema and registered using python-schema-registry-client.</p>"},{"location":"#requirements","title":"Requirements","text":"<p>python 3.9+</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install faststream-schema-registry\n</code></pre>"},{"location":"#examples","title":"Examples","text":"<p>Serialize objects using either the AvroSchemaRegistry or the JsonSchemaRegistry</p>"},{"location":"#avroschemaregistry","title":"AvroSchemaRegistry","text":"<pre><code>from datetime import datetime\n\nfrom dataclasses_avroschema.pydantic import AvroBaseModel\nfrom faststream import FastStream\nfrom faststream.confluent import KafkaBroker\nfrom faststream_schema_registry.middleware import SchemaRegistryMiddleware\nfrom faststream_schema_registry.registries import AvroSchemaRegistry\n\nschema_registry = AvroSchemaRegistry(url=\"http://localhost:8081\")\nbroker = KafkaBroker(\n    \"localhost:29092\",\n    middlewares=[\n        SchemaRegistryMiddleware.make_middleware(schema_registry=schema_registry)\n    ],\n)\n\napp = FastStream(broker)\n\n# class for message object\nclass Message(AvroBaseModel):\n    timestamp: datetime\n    message_id: int\n    payload: str\n\n    class Meta:\n        namespace = \"com.test\"\n\n@app.after_startup\nasync def test():\n    await broker.publish(Message.fake(), topic=\"messages\")\n\n\n@broker.subscriber(\"messages\")\nasync def on_messages(msg: Message):\n    print(msg)\n</code></pre>"},{"location":"#jsonschemaregistry","title":"JsonSchemaRegistry","text":"<pre><code>from datetime import datetime\n\nfrom dataclasses_avroschema.pydantic import AvroBaseModel\nfrom faststream import FastStream\nfrom faststream.confluent import KafkaBroker\nfrom faststream_schema_registry.middleware import SchemaRegistryMiddleware\nfrom faststream_schema_registry.registries import JsonSchemaRegistry\n\nschema_registry = JsonSchemaRegistry(url=\"http://localhost:8081\")\nbroker = KafkaBroker(\n    \"localhost:29092\",\n    middlewares=[\n        SchemaRegistryMiddleware.make_middleware(schema_registry=schema_registry)\n    ],\n)\n...\n</code></pre>"},{"location":"api/","title":"<code>Registries</code>","text":"<p>Registries provide message serialization and manage schemas within the schema registry through the  schema-registry-client automatically.</p> <p>A registry is required when setting up the Middleware. You can choose between <code>AvroSchemaRegistry</code> and  <code>JsonSchemaRegistry</code></p>"},{"location":"api/#faststream_schema_registry.AvroSchemaRegistry","title":"faststream_schema_registry.AvroSchemaRegistry","text":"<pre><code>AvroSchemaRegistry(url)\n</code></pre> <p>               Bases: <code>BaseSchemaRegistry</code></p> <p>Schema Registry for Avro schemas</p> <p>Example</p> <pre><code>from faststream_schema_registry.registries import AvroSchemaRegistry\nfrom dataclasses_avroschema.pydantic import AvroBaseModel\n\nregistry = AvroSchemaRegistry(url=\"http://127.0.0.1:8081\")\n\nclass User(AvroBaseModel):\n    id: int\n    first_name: str\n    last_name: str\n    age: int\n\n    class Meta:\n        namespace = \"com.example.avro\"\n\nuser = User(id=1, first_name=\"John\", last_name=\"Doe\", age=21)\n\nmsg, headers = await registry.serialize(user)\nmsg, headers\n&gt;&gt;&gt; (b'\u0000\u0000\u0000\u0000\bJohn\u0006Doe*',\n{'schema-id': '2', 'schema-subject': 'User'})\n\ndecoded = await registry.deserialize(msg)\ndecoded\n&gt;&gt;&gt; {'id': 1, 'first_name': 'John', 'last_name': 'Doe', 'age': 21}\nUser(**decoded)\n&gt;&gt;&gt; User(id=1, first_name='John', last_name='Doe', age=21)\n</code></pre> PARAMETER DESCRIPTION <code>url</code> <p>URL of the Confluent Schema Registry API.</p> <p> TYPE: <code>str</code> </p> Source code in <code>src/faststream_schema_registry/registries.py</code> <pre><code>def __init__(self, url: str):\n    \"\"\"\n    Args:\n        url (str): URL of the Confluent Schema Registry API.\n    \"\"\"\n    self._schema_registry_client = AsyncSchemaRegistryClient(url)\n</code></pre>"},{"location":"api/#faststream_schema_registry.AvroSchemaRegistry.serialize","title":"serialize  <code>async</code>","text":"<pre><code>serialize(msg, **options)\n</code></pre> <p>Serialize Method</p> PARAMETER DESCRIPTION <code>msg</code> <p>Avrobase</p> <p> TYPE: <code>AvroBaseModel</code> </p> RETURNS DESCRIPTION <code>bytes</code> <p>encoded_message</p> <p> TYPE: <code>bytes</code> </p> <code>dict</code> <p>dictionary of headers with schema-id, subject keys injected</p> <p> TYPE: <code>dict[str, str]</code> </p> Source code in <code>src/faststream_schema_registry/registries.py</code> <pre><code>async def serialize(\n    self, msg: AvroBaseModel, **options\n) -&gt; typing.Tuple[bytes, dict[str, str]]:\n    \"\"\"\n    Serialize Method\n\n    Args:\n        msg (AvroBaseModel): Avrobase\n\n    Returns:\n        bytes: encoded_message\n        dict: dictionary of headers with schema-id, subject keys injected\n\n    \"\"\"\n    subject, schema_str, schema_obj = self._get_schema_from_message(msg)\n\n    message_encoded = await self._serializer.encode_record_with_schema(\n        subject, schema_obj, msg.to_dict()\n    )\n    schema_id = int.from_bytes(\n        message_encoded[1:5], byteorder=\"big\", signed=False\n    )\n\n    headers = options.get(\"headers\") or {}\n    headers[\"schema-id\"] = str(schema_id)\n    headers[\"schema-subject\"] = subject\n\n    return message_encoded, headers\n</code></pre>"},{"location":"api/#faststream_schema_registry.AvroSchemaRegistry.deserialize","title":"deserialize  <code>async</code>","text":"<pre><code>deserialize(msg)\n</code></pre> <p>Decode the serialized message into a object using it's schema</p> PARAMETER DESCRIPTION <code>msg</code> <p>StreamMessage object with</p> <p> TYPE: <code>StreamMessage[Any]</code> </p> RETURNS DESCRIPTION <code>dict</code> <p>The StreamMessage with the payload decoded</p> <p> TYPE: <code>dict[str, Any]</code> </p> Source code in <code>src/faststream_schema_registry/registries.py</code> <pre><code>async def deserialize(\n    self, msg: typing.Union[bytes, typing.Any]\n) -&gt; dict[str, typing.Any]:\n    \"\"\"\n    Decode the serialized message into a object using it's schema\n\n    Args:\n        msg (StreamMessage[typing.Any]): StreamMessage object with\n        encoded payload #ignore E501\n\n    Returns:\n        dict: The StreamMessage with the payload decoded\n    \"\"\"\n\n    decoded_message = await self._serializer.decode_message(msg)\n    return decoded_message\n</code></pre>"},{"location":"api/#faststream_schema_registry.JsonSchemaRegistry","title":"faststream_schema_registry.JsonSchemaRegistry","text":"<pre><code>JsonSchemaRegistry(url)\n</code></pre> <p>               Bases: <code>BaseSchemaRegistry</code></p> <p>Schema Registry for Json schemas</p> <p>Example</p> <pre><code>from faststream_schema_registry.registries import JsonSchemaRegistry\nfrom dataclasses_avroschema.pydantic import AvroBaseModel\n\nregistry = JsonSchemaRegistry(url=\"http://127.0.0.1:8081\")\n\nclass User(AvroBaseModel):\n    id: int\n    first_name: str\n    last_name: str\n    age: int\n\n    class Meta:\n        namespace = \"com.example.json\"\n\nuser = User(id=1, first_name=\"John\", last_name=\"Doe\", age=21)\n\nmsg, headers = await registry.serialize(user)\nmsg, headers\n&gt;&gt;&gt; (b'\u0000\u0000\u0000\u0000{\"id\": 1, \"first_name\": \"John\", \"last_name\": \"Doe\", \"age\": 21}',\n{'schema-id': '3', 'schema-subject': 'com.example.json.User'})\n\ndecoded = await registry.deserialize(msg)\ndecoded\n&gt;&gt;&gt; {'id': 1, 'first_name': 'John', 'last_name': 'Doe', 'age': 21}\nUser(**decoded)\n&gt;&gt;&gt; User(id=1, first_name='John', last_name='Doe', age=21)\n</code></pre> PARAMETER DESCRIPTION <code>url</code> <p>URL of the Confluent Schema Registry API.</p> <p> TYPE: <code>str</code> </p> Source code in <code>src/faststream_schema_registry/registries.py</code> <pre><code>def __init__(self, url: str):\n    \"\"\"\n    Args:\n        url (str): URL of the Confluent Schema Registry API.\n    \"\"\"\n    self._schema_registry_client = AsyncSchemaRegistryClient(url)\n</code></pre>"},{"location":"api/#faststream_schema_registry.JsonSchemaRegistry.serialize","title":"serialize  <code>async</code>","text":"<pre><code>serialize(msg, **options)\n</code></pre> <p>Serialize Method</p> PARAMETER DESCRIPTION <code>msg</code> <p>Avrobase</p> <p> TYPE: <code>AvroBaseModel</code> </p> RETURNS DESCRIPTION <code>bytes</code> <p>encoded_message</p> <p> TYPE: <code>bytes</code> </p> <code>dict</code> <p>dictionary of headers with schema-id, subject keys injected</p> <p> TYPE: <code>dict[str, str]</code> </p> Source code in <code>src/faststream_schema_registry/registries.py</code> <pre><code>async def serialize(\n    self, msg: AvroBaseModel, **options\n) -&gt; typing.Tuple[bytes, dict[str, str]]:\n    \"\"\"\n    Serialize Method\n\n    Args:\n        msg (AvroBaseModel): Avrobase\n\n    Returns:\n        bytes: encoded_message\n        dict: dictionary of headers with schema-id, subject keys injected\n\n    \"\"\"\n    subject, schema_str, schema_obj = self._get_schema_from_message(msg)\n\n    message_encoded = await self._serializer.encode_record_with_schema(\n        subject, schema_obj, msg.to_dict()\n    )\n    schema_id = int.from_bytes(\n        message_encoded[1:5], byteorder=\"big\", signed=False\n    )\n\n    headers = options.get(\"headers\") or {}\n    headers[\"schema-id\"] = str(schema_id)\n    headers[\"schema-subject\"] = subject\n\n    return message_encoded, headers\n</code></pre>"},{"location":"api/#faststream_schema_registry.JsonSchemaRegistry.deserialize","title":"deserialize  <code>async</code>","text":"<pre><code>deserialize(msg)\n</code></pre> <p>Decode the serialized message into a object using it's schema</p> PARAMETER DESCRIPTION <code>msg</code> <p>StreamMessage object with</p> <p> TYPE: <code>StreamMessage[Any]</code> </p> RETURNS DESCRIPTION <code>dict</code> <p>The StreamMessage with the payload decoded</p> <p> TYPE: <code>dict[str, Any]</code> </p> Source code in <code>src/faststream_schema_registry/registries.py</code> <pre><code>async def deserialize(\n    self, msg: typing.Union[bytes, typing.Any]\n) -&gt; dict[str, typing.Any]:\n    \"\"\"\n    Decode the serialized message into a object using it's schema\n\n    Args:\n        msg (StreamMessage[typing.Any]): StreamMessage object with\n        encoded payload #ignore E501\n\n    Returns:\n        dict: The StreamMessage with the payload decoded\n    \"\"\"\n\n    decoded_message = await self._serializer.decode_message(msg)\n    return decoded_message\n</code></pre>"},{"location":"middleware/","title":"<code>Middleware</code>","text":"<p>Registries provide message serialization and manage schemas within the schema registry through the  schema-registry-client automatically.</p> <p>A registry is required when setting up the Middleware. You can choose between <code>AvroSchemaRegistry</code> and  <code>JsonSchemaRegistry</code></p>"},{"location":"middleware/#faststream_schema_registry.SchemaRegistryMiddleware","title":"faststream_schema_registry.SchemaRegistryMiddleware","text":"<pre><code>SchemaRegistryMiddleware(msg, *, schema_registry)\n</code></pre> <p>               Bases: <code>BaseMiddleware</code></p> <p>SchemaRegistryMiddleware</p> Source code in <code>src/faststream_schema_registry/middleware.py</code> <pre><code>def __init__(\n    self,\n    msg: Optional[Any],\n    *,\n    schema_registry: BaseSchemaRegistry,\n):\n    self.schema_registry = schema_registry\n    super().__init__(msg)\n</code></pre>"},{"location":"middleware/#faststream_schema_registry.SchemaRegistryMiddleware.schema_registry","title":"schema_registry  <code>instance-attribute</code>","text":"<pre><code>schema_registry = schema_registry\n</code></pre>"},{"location":"middleware/#faststream_schema_registry.SchemaRegistryMiddleware.make_middleware","title":"make_middleware  <code>classmethod</code>","text":"<pre><code>make_middleware(schema_registry)\n</code></pre> <p>Creates a partial function that can be used to instantiate the middleware.</p> Source code in <code>src/faststream_schema_registry/middleware.py</code> <pre><code>@classmethod\ndef make_middleware(\n    cls, schema_registry: BaseSchemaRegistry\n) -&gt; Callable[[Any], \"SchemaRegistryMiddleware\"]:\n    \"\"\"\n    Creates a partial function that can be used to instantiate the\n    middleware.\n\n    \"\"\"\n    return partial(cls, schema_registry=schema_registry)\n</code></pre>"},{"location":"middleware/#faststream_schema_registry.SchemaRegistryMiddleware.consume_scope","title":"consume_scope  <code>async</code>","text":"<pre><code>consume_scope(call_next, msg)\n</code></pre> Source code in <code>src/faststream_schema_registry/middleware.py</code> <pre><code>async def consume_scope(\n    self,\n    call_next: Callable[[Any], Awaitable[Any]],\n    msg: StreamMessage[Any],\n) -&gt; Any:\n    decoded_message = await self.schema_registry.deserialize(msg)\n\n    msg._decoded_body = decoded_message\n\n    return await call_next(msg)\n</code></pre>"},{"location":"middleware/#faststream_schema_registry.SchemaRegistryMiddleware.publish_scope","title":"publish_scope  <code>async</code>","text":"<pre><code>publish_scope(call_next, msg, **options)\n</code></pre> Source code in <code>src/faststream_schema_registry/middleware.py</code> <pre><code>async def publish_scope(\n    self,\n    call_next: Callable[..., Awaitable[Any]],\n    msg: Any,\n    **options: Any,\n) -&gt; Any:\n    message_encoded, headers = await self.schema_registry.serialize(\n        msg, **options\n    )\n\n    return await call_next(message_encoded, **options)\n</code></pre>"}]}