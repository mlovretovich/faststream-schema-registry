# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]

permissions:
  contents: read

jobs:
#
#  test:
#    runs-on: ubuntu-latest
#    strategy:
#      matrix:
#        python-version: [ '3.10', '3.11', '3.12', '3.13' ]
#    steps:
#      - uses: actions/checkout@v3
#      - name: Set up Python ${{ matrix.python-version }}
#        uses: actions/setup-python@v4
#        with:
#          python-version: ${{ matrix.python-version }}
#      - name: Install dependencies
#        id: setup-python
#        run: |
#          python -m pip install --upgrade pip
#          python -m pip install tox tox-gh-actions
#      - name: Install Poetry
#        uses: snok/install-poetry@v1
#        with:
#          virtualenvs-create: true
#          virtualenvs-in-project: true
#          virtualenvs-path: .venv
#          installer-parallel: true
#      - name: Load cached venv
#        id: cached-poetry-dependencies
#        uses: actions/cache@v4
#        with:
#          path: .venv
#          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
#      - name: Test with tox
#        run: tox
  build:
    runs-on: ubuntu-latest
#    needs: test
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python > 3.10
      id: setup-python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
        virtualenvs-path: .venv
        installer-parallel: true

      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
    - name: Test output key
      run: echo ${{ steps.setup-python.outputs.python-version }} && echo ${{ runner.os }} && echo ${{ hashFiles('**/poetry.lock') }}
    - name: Load cached venv
      id: restore-cache
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('poetry.lock') }}
    - name: Install dependencies
#      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: python --version && which python && poetry install --all-extras
#    - name: Run Tests & Coverage
#      run: poetry run pytest --cov-branch --cov-report=xml
#    - name: Upload coverage reports to Codecov
#      uses: codecov/codecov-action@v5
#      with:
#        token: ${{ secrets.CODECOV_TOKEN }}
#        slug: mlovretovich/faststream-schema-registry
    - name: Test cache key one
      run: echo venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('poetry.lock') }}
    - name: Test cache key
      run: echo ${{ steps.cached-poetry-dependencies.outputs }}
    - name: Restore Cache
      uses: actions/cache/save@v4
      with:
        path: .venv
        key: ${{ steps.restore-cache.outputs.cache-primary-key }}

#    - name: build release distributions
#      run: |
#        # NOTE: put your own distribution build steps here.
#        poetry build
#    - name: upload dists
#      uses: actions/upload-artifact@v4
#      with:
#        name: release-dists
#        path: dist/

#  pypi-publish:
#    name: Upload release to PyPI
#    needs: build
#    runs-on: ubuntu-latest
#    environment:
#      name: pypi
#      url: https://test.pypi.org/project/faststream-schema-registry/
#    permissions:
#      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing
#    steps:
#      # retrieve your distributions here
#      - name: Retrieve release distributions
#        uses: actions/download-artifact@v4
#        with:
#          name: release-dists
#          path: dist/
#      - name: Publish package distributions to PyPI
#        uses: pypa/gh-action-pypi-publish@release/v1
#        with:
#          repository-url: https://test.pypi.org/legacy/
